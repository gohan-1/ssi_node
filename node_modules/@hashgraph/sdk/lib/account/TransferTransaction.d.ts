/**
 * @typedef {import("../long.js").LongObject} LongObject
 * @typedef {import("bignumber.js").default} BigNumber
 */
/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody
 * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 * @typedef {import("@hashgraph/proto").IAccountAmount} proto.IAccountAmount
 */
/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../transaction/TransactionId.js").default} TransactionId
 */
/**
 * @typedef {object} TransferTokensInput
 * @property {TokenId | string} tokenId
 * @property {AccountId | string} accountId
 * @property {Long | number} amount
 */
/**
 * @typedef {object} TransferTokenObject
 * @property {TokenId} tokenId
 * @property {AccountId} accountId
 * @property {Long} amount
 */
/**
 * @typedef {object} TransferHbarInput
 * @property {AccountId | string} accountId
 * @property {number | string | Long | BigNumber | Hbar} amount
 */
/**
 * Transfers a new Hederaâ„¢ crypto-currency token.
 */
export default class TransferTransaction extends Transaction {
    /**
     * @internal
     * @param {proto.ITransaction[]} transactions
     * @param {proto.ISignedTransaction[]} signedTransactions
     * @param {TransactionId[]} transactionIds
     * @param {AccountId[]} nodeIds
     * @param {proto.ITransactionBody[]} bodies
     * @returns {TransferTransaction}
     */
    static _fromProtobuf(transactions: proto.ITransaction[], signedTransactions: proto.ISignedTransaction[], transactionIds: TransactionId[], nodeIds: AccountId[], bodies: proto.ITransactionBody[]): TransferTransaction;
    /**
     * @param {object} [props]
     * @param {(TransferTokensInput)[]} [props.tokenTransfers]
     * @param {(TransferHbarInput)[]} [props.hbarTransfers]
     */
    constructor(props?: {
        tokenTransfers?: TransferTokensInput[] | undefined;
        hbarTransfers?: TransferHbarInput[] | undefined;
    } | undefined);
    /**
     * @private
     * @type {TokenTransferMap}
     */
    private _tokenTransfers;
    /**
     * @private
     * @type {HbarTransferMap}
     */
    private _hbarTransfers;
    /**
     * @returns {TokenTransferMap}
     */
    get tokenTransfers(): TokenTransferMap;
    /**
     * @param {TokenId | string} tokenId
     * @param {AccountId | string} accountId
     * @param {number | Long} amount
     * @returns {this}
     */
    addTokenTransfer(tokenId: TokenId | string, accountId: AccountId | string, amount: number | Long): this;
    /**
     * @returns {HbarTransferMap}
     */
    get hbarTranfers(): HbarTransferMap;
    /**
     * @internal
     * @param {AccountId | string} accountId
     * @param {number | string | Long | LongObject | BigNumber | Hbar} amount
     * @returns {TransferTransaction}
     */
    addHbarTransfer(accountId: AccountId | string, amount: number | string | Long | LongObject | BigNumber | Hbar): TransferTransaction;
}
export type LongObject = {
    low: number;
    high: number;
    unsigned: boolean;
};
export type BigNumber = import("bignumber.js").default;
export type Channel = import("../channel/Channel.js").default;
export type TransactionId = import("../transaction/TransactionId.js").default;
export type TransferTokensInput = {
    tokenId: TokenId | string;
    accountId: AccountId | string;
    amount: Long | number;
};
export type TransferTokenObject = {
    tokenId: TokenId;
    accountId: AccountId;
    amount: Long;
};
export type TransferHbarInput = {
    accountId: AccountId | string;
    amount: number | string | Long | BigNumber | Hbar;
};
import Transaction from "../transaction/Transaction.js";
import TokenTransferMap from "./TokenTransferMap.js";
import TokenId from "../token/TokenId.js";
import AccountId from "./AccountId.js";
import Long from "long";
import HbarTransferMap from "./HbarTransferMap.js";
import Hbar from "../Hbar.js";
declare namespace proto {
    type ITransaction = import("@hashgraph/proto/lib/proto").proto.ITransaction;
    type ISignedTransaction = import("@hashgraph/proto/lib/proto").proto.ISignedTransaction;
    type TransactionBody = import("@hashgraph/proto/lib/proto").proto.TransactionBody;
    type ITransactionBody = import("@hashgraph/proto/lib/proto").proto.ITransactionBody;
    type ITransactionResponse = import("@hashgraph/proto/lib/proto").proto.ITransactionResponse;
    type ICryptoTransferTransactionBody = import("@hashgraph/proto/lib/proto").proto.ICryptoTransferTransactionBody;
    type ITokenID = import("@hashgraph/proto/lib/proto").proto.ITokenID;
    type IAccountID = import("@hashgraph/proto/lib/proto").proto.IAccountID;
    type IAccountAmount = import("@hashgraph/proto/lib/proto").proto.IAccountAmount;
}
export {};
