"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EntityId = _interopRequireWildcard(require("../EntityId.cjs"));

var proto = _interopRequireWildcard(require("@hashgraph/proto"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * The ID for a crypto-currency account on Hedera.
 *
 * @augments {EntityId<proto.IAccountID>}
 */
class AccountId extends _EntityId.default {
  /**
   * @param {number | Long | import("../EntityId").IEntityId} props
   * @param {(number | Long)=} realm
   * @param {(number | Long)=} num
   */
  constructor(props, realm, num) {
    super(props, realm, num);
  }
  /**
   * @param {string} text
   * @returns {AccountId}
   */


  static fromString(text) {
    return new AccountId(...(0, _EntityId.fromString)(text));
  }
  /**
   * @internal
   * @param {proto.IAccountID} id
   * @returns {AccountId}
   */


  static _fromProtobuf(id) {
    return new AccountId({
      shard: id.shardNum != null ? id.shardNum : 0,
      realm: id.realmNum != null ? id.realmNum : 0,
      num: id.accountNum != null ? id.accountNum : 0
    });
  }
  /**
   * @param {Uint8Array} bytes
   * @returns {AccountId}
   */


  static fromBytes(bytes) {
    return AccountId._fromProtobuf(proto.AccountID.decode(bytes));
  }
  /**
   * @param {string} address
   * @returns {AccountId}
   */


  static fromSolidityAddress(address) {
    const [shard, realm, account] = (0, _EntityId.fromSolidityAddress)(address);
    return new AccountId(shard, realm, account);
  }
  /**
   * @internal
   * @override
   * @returns {proto.IAccountID}
   */


  _toProtobuf() {
    return {
      accountNum: this.num,
      shardNum: this.shard,
      realmNum: this.realm
    };
  }
  /**
   * @returns {Uint8Array}
   */


  toBytes() {
    return proto.AccountID.encode(this._toProtobuf()).finish();
  }

}

exports.default = AccountId;