/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 */
/**
 * @typedef {import("@hashgraph/cryptography").Key} Key
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("../channel/Channel.js").default} Channel
 */
/**
 * @typedef {object} TransferObject
 * @property {AccountId | string} accountId
 * @property {number | string | Long | BigNumber | Hbar} amount
 */
/**
 * Transfer cryptocurrency from some accounts to other accounts.
 */
export default class CryptoTransferTransaction extends Transaction {
    /**
     * @internal
     * @param {proto.TransactionBody} body
     * @returns {CryptoTransferTransaction}
     */
    static _fromProtobuf(body: proto.TransactionBody): CryptoTransferTransaction;
    /**
     * @param {object} [props]
     * @param {(Transfer | TransferObject)[]} [props.transfers]
     */
    constructor(props?: {
        transfers?: (Transfer | TransferObject)[] | undefined;
    } | undefined);
    /**
     * @private
     * @type {Transfer[]}
     */
    private _transfers;
    /**
     * @returns {Transfer[]}
     */
    get transfers(): Transfer[];
    /**
     * @param {AccountId | string} accountId
     * @param {number | string | Long | BigNumber | Hbar} amount
     * @returns {CryptoTransferTransaction}
     */
    addSender(accountId: AccountId | string, amount: number | string | Long | BigNumber | Hbar): CryptoTransferTransaction;
    /**
     * @param {AccountId | string} accountId
     * @param {number | string | Long | BigNumber | Hbar} amount
     * @returns {CryptoTransferTransaction}
     */
    addRecipient(accountId: AccountId | string, amount: number | string | Long | BigNumber | Hbar): CryptoTransferTransaction;
}
export type Key = import("@hashgraph/cryptography").Key;
export type BigNumber = import("bignumber.js").default;
export type Channel = import("../channel/Channel.js").default;
export type TransferObject = {
    accountId: AccountId | string;
    amount: number | string | Long | BigNumber | Hbar;
};
import Transaction from "../transaction/Transaction.js";
import Transfer from "../Transfer.js";
import AccountId from "./AccountId.js";
import Hbar from "../Hbar.js";
declare namespace proto {
    type ITransaction = import("@hashgraph/proto/lib/proto").proto.ITransaction;
    type TransactionBody = import("@hashgraph/proto/lib/proto").proto.TransactionBody;
    type ITransactionBody = import("@hashgraph/proto/lib/proto").proto.ITransactionBody;
    type ITransactionResponse = import("@hashgraph/proto/lib/proto").proto.ITransactionResponse;
    type ICryptoTransferTransactionBody = import("@hashgraph/proto/lib/proto").proto.ICryptoTransferTransactionBody;
    type IAccountID = import("@hashgraph/proto/lib/proto").proto.IAccountID;
}
export {};
