/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").ISignedTransaction} proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ITokenCreateTransactionBody} proto.ITokenCreateTransactionBody
 * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
 */
/**
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("@hashgraph/cryptography").Key} Key
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../transaction/TransactionId.js").default} TransactionId
 */
/**
 * Create a new Hederaâ„¢ crypto-currency token.
 */
export default class TokenCreateTransaction extends Transaction {
    /**
     * @internal
     * @param {proto.ITransaction[]} transactions
     * @param {proto.ISignedTransaction[]} signedTransactions
     * @param {TransactionId[]} transactionIds
     * @param {AccountId[]} nodeIds
     * @param {proto.ITransactionBody[]} bodies
     * @returns {TokenCreateTransaction}
     */
    static _fromProtobuf(transactions: proto.ITransaction[], signedTransactions: proto.ISignedTransaction[], transactionIds: TransactionId[], nodeIds: AccountId[], bodies: proto.ITransactionBody[]): TokenCreateTransaction;
    /**
     * @param {object} [props]
     * @param {string} [props.tokenName]
     * @param {string} [props.tokenSymbol]
     * @param {Long | number} [props.decimals]
     * @param {Long | number} [props.initialSupply]
     * @param {AccountId | string} [props.treasuryAccountId]
     * @param {Key} [props.adminKey]
     * @param {Key} [props.kycKey]
     * @param {Key} [props.freezeKey]
     * @param {Key} [props.wipeKey]
     * @param {Key} [props.supplyKey]
     * @param {boolean} [props.freezeDefault]
     * @param {AccountId | string} [props.autoRenewAccountId]
     * @param {Timestamp | Date} [props.expirationTime]
     * @param {Duration | Long | number} [props.autoRenewPeriod]
     */
    constructor(props?: {
        tokenName?: string | undefined;
        tokenSymbol?: string | undefined;
        decimals?: number | Long.Long | undefined;
        initialSupply?: number | Long.Long | undefined;
        treasuryAccountId?: string | AccountId | undefined;
        adminKey?: import("@hashgraph/cryptography").Key | undefined;
        kycKey?: import("@hashgraph/cryptography").Key | undefined;
        freezeKey?: import("@hashgraph/cryptography").Key | undefined;
        wipeKey?: import("@hashgraph/cryptography").Key | undefined;
        supplyKey?: import("@hashgraph/cryptography").Key | undefined;
        freezeDefault?: boolean | undefined;
        autoRenewAccountId?: string | AccountId | undefined;
        expirationTime?: Date | Timestamp | undefined;
        autoRenewPeriod?: number | Long.Long | Duration | undefined;
    } | undefined);
    /**
     * @private
     * @type {?string}
     */
    private _tokenName;
    /**
     * @private
     * @type {?string}
     */
    private _tokenSymbol;
    /**
     * @private
     * @type {?Long}
     */
    private _decimals;
    /**
     * @private
     * @type {?Long}
     */
    private _initialSupply;
    /**
     * @private
     * @type {?AccountId}
     */
    private _treasuryAccountId;
    /**
     * @private
     * @type {?Key}
     */
    private _adminKey;
    /**
     * @private
     * @type {?Key}
     */
    private _kycKey;
    /**
     * @private
     * @type {?Key}
     */
    private _freezeKey;
    /**
     * @private
     * @type {?Key}
     */
    private _wipeKey;
    /**
     * @private
     * @type {?Key}
     */
    private _supplyKey;
    /**
     * @private
     * @type {?boolean}
     */
    private _freezeDefault;
    /**
     * @private
     * @type {?AccountId}
     */
    private _autoRenewAccountId;
    /**
     * @private
     * @type {Timestamp}
     */
    private _expirationTime;
    /**
     * @private
     * @type {Duration}
     */
    private _autoRenewPeriod;
    /**
     * @returns {?string}
     */
    get tokenName(): string | null;
    /**
     * @param {string} name
     * @returns {this}
     */
    setTokenName(name: string): this;
    /**
     * @returns {?string}
     */
    get tokenSymbol(): string | null;
    /**
     * @param {string} symbol
     * @returns {this}
     */
    setTokenSymbol(symbol: string): this;
    /**
     * @returns {?Long}
     */
    get decimals(): Long.Long | null;
    /**
     * @param {Long | number} decimals
     * @returns {this}
     */
    setDecimals(decimals: Long | number): this;
    /**
     * @returns {?Long}
     */
    get initialSupply(): Long.Long | null;
    /**
     * @param {Long | number} initialSupply
     * @returns {this}
     */
    setInitialSupply(initialSupply: Long | number): this;
    /**
     * @returns {?AccountId}
     */
    get treasuryAccountId(): AccountId | null;
    /**
     * @param {AccountId | string} id
     * @returns {this}
     */
    setTreasuryAccountId(id: AccountId | string): this;
    /**
     * @returns {?Key}
     */
    get adminKey(): import("@hashgraph/cryptography").Key | null;
    /**
     * @param {Key} key
     * @returns {this}
     */
    setAdminKey(key: Key): this;
    /**
     * @returns {?Key}
     */
    get kycKey(): import("@hashgraph/cryptography").Key | null;
    /**
     * @param {Key} key
     * @returns {this}
     */
    setKycKey(key: Key): this;
    /**
     * @returns {?Key}
     */
    get freezeKey(): import("@hashgraph/cryptography").Key | null;
    /**
     * @param {Key} key
     * @returns {this}
     */
    setFreezeKey(key: Key): this;
    /**
     * @returns {?Key}
     */
    get wipeKey(): import("@hashgraph/cryptography").Key | null;
    /**
     * @param {Key} key
     * @returns {this}
     */
    setWipeKey(key: Key): this;
    /**
     * @returns {?Key}
     */
    get supplyKey(): import("@hashgraph/cryptography").Key | null;
    /**
     * @param {Key} key
     * @returns {this}
     */
    setSupplyKey(key: Key): this;
    /**
     * @returns {?boolean}
     */
    get freezeDefault(): boolean | null;
    /**
     * @param {boolean} freeze
     * @returns {this}
     */
    setFreezeDefault(freeze: boolean): this;
    /**
     * @returns {Timestamp}
     */
    get expirationTime(): Timestamp;
    /**
     * @param {Timestamp | Date} time
     * @returns {this}
     */
    setExpirationTime(time: Timestamp | Date): this;
    /**
     * @returns {?AccountId}
     */
    get autoRenewAccountId(): AccountId | null;
    /**
     * @param {AccountId | string} id
     * @returns {this}
     */
    setAutoRenewAccountId(id: AccountId | string): this;
    /**
     * @returns {Duration}
     */
    get autoRenewPeriod(): Duration;
    /**
     * Set the auto renew period for this token.
     *
     * @param {Duration | Long | number} autoRenewPeriod
     * @returns {this}
     */
    setAutoRenewPeriod(autoRenewPeriod: Duration | Long | number): this;
}
export type BigNumber = import("bignumber.js").default;
export type Key = import("@hashgraph/cryptography").Key;
export type Channel = import("../channel/Channel.js").default;
export type TransactionId = import("../transaction/TransactionId.js").default;
import Transaction from "../transaction/Transaction.js";
import Long from "long";
import AccountId from "../account/AccountId.js";
import Timestamp from "../Timestamp.js";
import Duration from "../Duration.js";
declare namespace proto {
    type ITransaction = import("@hashgraph/proto/lib/proto").proto.ITransaction;
    type ISignedTransaction = import("@hashgraph/proto/lib/proto").proto.ISignedTransaction;
    type TransactionBody = import("@hashgraph/proto/lib/proto").proto.TransactionBody;
    type ITransactionBody = import("@hashgraph/proto/lib/proto").proto.ITransactionBody;
    type ITransactionResponse = import("@hashgraph/proto/lib/proto").proto.ITransactionResponse;
    type ITokenCreateTransactionBody = import("@hashgraph/proto/lib/proto").proto.ITokenCreateTransactionBody;
    type ITokenID = import("@hashgraph/proto/lib/proto").proto.ITokenID;
}
export {};
