/**
 * @typedef {import("./account/AccountId.js").default} AccountId
 * @typedef {import("./channel/Channel.js").default} Channel
 * @typedef {import("./transaction/TransactionId.js").default} TransactionId
 */
/**
 * @abstract
 * @internal
 * @template RequestT
 * @template ResponseT
 * @template OutputT
 */
export default class Executable<RequestT, ResponseT, OutputT> {
    /**
     * The number of times we can retry the grpc call
     *
     * @private
     * @type {number}
     */
    private _maxRetries;
    /**
     * The index of the next transaction to be executed.
     *
     * @protected
     * @type {number}
     */
    protected _nextNodeIndex: number;
    /**
     * List of node account IDs for each transaction that has been
     * built.
     *
     * @internal
     * @type {AccountId[]}
     */
    _nodeIds: AccountId[];
    /**
     * @returns {AccountId[]}
     */
    get nodeAccountIds(): import("./account/AccountId.js").default[];
    /**
     * @param {AccountId[]} nodeIds
     * @returns {this}
     */
    setNodeAccountIds(nodeIds: AccountId[]): this;
    /**
     * @returns {number}
     */
    get maxRetries(): number;
    /**
     * @param {number} maxRetries
     * @returns {this}
     */
    setMaxRetries(maxRetries: number): this;
    /**
     * @abstract
     * @protected
     * @param {import("./client/Client.js").default<Channel, *>} client
     * @returns {Promise<void>}
     */
    protected _beforeExecute(client: import("./client/Client.js").default<Channel, any>): Promise<void>;
    /**
     * @abstract
     * @protected
     * @returns {RequestT}
     */
    protected _makeRequest(): RequestT;
    /**
     * @abstract
     * @internal
     * @param {ResponseT} response
     * @returns {Status}
     */
    _mapResponseStatus(response: ResponseT): Status;
    /**
     * @abstract
     * @protected
     * @param {ResponseT} response
     * @param {AccountId} nodeAccountId
     * @param {RequestT} request
     * @returns {Promise<OutputT>}
     */
    protected _mapResponse(response: ResponseT, nodeAccountId: AccountId, request: RequestT): Promise<OutputT>;
    /**
     * @abstract
     * @internal
     * @param {Channel} channel
     * @param {RequestT} request
     * @returns {Promise<ResponseT>}
     */
    _execute(channel: Channel, request: RequestT): Promise<ResponseT>;
    /**
     * @abstract
     * @protected
     * @returns {AccountId}
     */
    protected _getNodeAccountId(): AccountId;
    /**
     * @abstract
     * @protected
     * @returns {TransactionId}
     */
    protected _getTransactionId(): TransactionId;
    /**
     * @protected
     * @returns {void}
     */
    protected _advanceRequest(): void;
    /**
     * @protected
     * @param {Status} responseStatus
     * @param {ResponseT} response
     * @returns {boolean}
     */
    protected _shouldRetry(responseStatus: Status, response: ResponseT): boolean;
    /**
     * @protected
     * @param {GrpcServiceError} error
     * @returns {boolean}
     */
    protected _shouldRetryExceptionally(error: GrpcServiceError): boolean;
    /**
     * @template {Channel} ChannelT
     * @template MirrorChannelT
     * @param {import("./client/Client.js").default<ChannelT, MirrorChannelT>} client
     * @returns {Promise<OutputT>}
     */
    execute<ChannelT extends import("./channel/Channel.js").default, MirrorChannelT>(client: import("./client/Client.js").default<ChannelT, MirrorChannelT>): Promise<OutputT>;
}
export type AccountId = import("./account/AccountId.js").default;
export type Channel = import("./channel/Channel.js").default;
export type TransactionId = import("./transaction/TransactionId.js").default;
import Status from "./Status.js";
import GrpcServiceError from "./grpc/GrpcServiceError.js";
